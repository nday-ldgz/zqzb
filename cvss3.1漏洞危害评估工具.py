#! /usr/bin/python3
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#by Greekn

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from cvss import CVSS3

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(684, 607)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(550, 20, 101, 51))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(60, 30, 111, 31))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(190, 30, 341, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(550, 520, 121, 41))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 80, 71, 16))
        self.label_3.setObjectName("label_3")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(10, 100, 661, 431))
        self.textEdit.setObjectName("textEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 684, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        
        self.pushButton.clicked.connect(self.cvss3) #参数传递 定义事件
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
  
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CVSS3.1漏洞危害评估工具   QQ交流群801830727"))
        self.pushButton.setText(_translate("MainWindow", "评估"))
        self.label.setText(_translate("MainWindow", "输入cvss基本度量："))
        self.lineEdit.setText(_translate("MainWindow", "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"))
        self.label_2.setText(_translate("MainWindow", "微信公众号：漏洞感知"))
        self.label_3.setText(_translate("MainWindow", "回显内容："))
        
    def cvss3(self):
        #text =self.lineEdit.text() 输入数据
        #self.textEdit.setText(text) 输出数据
        vector = self.lineEdit.text()
        cvss = CVSS3(vector)
        av = vector.split('/')[1] #攻击向量 AV
        av = av.split(':')[1]
        '''
        这一指标反映了可能利用脆弱性的背景。 这个度量值（以及因此的基本分数)将更大，攻击者可以更远程(逻辑上和物理上），以利用脆弱的组件。 假设是，一个漏洞的潜在攻击者的数量可以从一个网
        络中开发，而潜在攻击者的数量则大于可能开发需要物理访问设备的漏洞的潜在攻击者的数量，因此需要更大的基础评分。
        '''

        ac = vector.split('/')[2] #攻击复杂性 AC
        ac = ac.split(':')[1]
        '''
        这个度量描述了攻击者无法控制的条件，这些条件必须存在才能利用漏洞。 如下所述，这些条件可能需要收集有关目标的更多信息，或计算异常。 
        重要的是，对该度量的评估排除了用户交互的任何要求，以便利用漏洞。
        '''
        pr = vector.split('/')[3] #所需特权 PR
        pr = pr.split(':')[1]
        '''
        此度量描述了攻击者在成功开发漏洞之前必须拥有的权限级别。 如果不需要特权，基本分数是最大的。。
        '''
        ui = vector.split('/')[4] #用户交互 UI
        ui = ui.split(':')[1]
        '''
        此度量捕获了除攻击者之外的人类用户参与脆弱组件成功折衷的要求。 此度量确定是否可以完全根据攻击者的意愿开发漏洞，
        或者一个单独的用户（或用户启动的进程）是否必须以某种方式参与。当不需要用户交互时，基本分数是最大的。
        '''

        s = vector.split('/')[5] #范围 S
        s = s.split(':')[1]
        '''
        范围度量反映了一个易受伤害组件中的漏洞是否会影响超出其安全范围的组件中的资源。
        从形式上讲，安全授权是一种机制（例如，应用程序、操作系统、固件、沙箱环境)，它根据某些主体/执行器(例如，人类用户、进程）如何以受控方式访问某些受限制的对象/资源(例如文件、CPU、内存)来定义和强制访问控制。 一个单一安全机构管辖下的所有主体和客体被认为属于一个安全范
        围。 如果脆弱组件中的漏洞会影响到与该组件不同的安全范围内的组件易受攻击的组件，发生范围更改。 直观地说，当漏洞的影响破坏了安全/信任边界并影响到易受伤害
        组件所在的安全范围之外的组件时，就会发生范围更改。
        组件的安全范围包括仅为该组件提供功能的其他组件，即使这些其他组件有自己的安全权限。 例如，仅由一个应用程序使用的数据库被视为该应用程序安全范围的一部分，即使数据库有自己的安全权限，例如，一种基于数据库用户和相关数据库权限控制对数据库记录访问的机制。
        当范围发生变化时，基本分数是最大的。
        '''

        c = vector.split('/')[6] #保密 C
        c = c.split(':')[1]
        '''
        该度量衡量由于成功地利用了漏洞，由软件组件管理的信息资源对机密性的影响。 保密是指仅限于授权用户访问和披露信息，以及防止未经授权的用户访问或披露信息。 当受影响分量损失最大
        时，基本分数最大。
        '''

        i = vector.split('/')[7] #完整性 I
        i = i.split(':')[1]
        '''
        这一度量衡量成功开发的脆弱性对完整性的影响。 
        诚信是指信息的可信度和准确性。 当对受影响分量的影响最大时，基本分数最大。
        '''

        a = vector.split('/')[8] #可用性 A
        a = a.split(':')[1]
        '''
        受影响组件使用的数据（例如信息、文件）的机密性或完整性的丧失，这个度量是指受影响组件本
        身的可用性的丧失，例如网络服务(例如Web、数据库、电子邮件)。 由于可用性是指信息资源的可访问性，
        消耗网络带宽、处理器周期或磁盘空间的攻击都会影响受影响组件的可用性。 当对受影响分量的影响最大时，基本分数最大。
        '''

        ava ={'N':'1.攻击向量AV:网络(N)易受攻击的组件被绑定到网络堆栈，并且一组可能的攻击者扩展到下面列出的其他选项之外，直到并包括整个Internet。 这种漏洞通常被称为“远程可利用”，可以被认为是一种攻击，在协议级别的一个或多个网络跳离（例如，跨越一个或多个路由器）时可被利用。 网络攻击的一个例子是攻击者通过在广域网(例如CVE-2004-0230)发送专门制作的TCP数据包而导致拒绝服务(DoS)。',
        'A':'1.攻击向量AV:相邻(A)易受攻击的组件被绑定到网络堆栈，但在协议级别的攻击被限制在逻辑上相邻的拓扑上。 这可能意味着必须从相同的共享物理(例如蓝牙或IEEE802.11)或逻辑  (例如本地IP子网)网络中发起攻击，或者从安全或其他有限的管理域(例如MPLS、安全VPN到管理网络区域)中发起攻击。 相邻攻击的一个例子是 ARP(IPv4)或邻居发现(IPv6)洪水，导致在本地局域网段上拒绝服务(例如CVE- 2013-6014)。',
        'L':'1.攻击向量AV:当地(L)脆弱组件不绑定到网络堆栈，攻击者的路径是通过读/写/执行功能。 要么：•攻击者通过本地访问目标系统（例如键盘、控制台）或远程(例如SSH)来利用漏洞；或•  攻击者依赖他人的用户交互来执行开发漏洞所需的操作（例如，使用社会工程技术欺骗合法用户打开恶意文档）。',
        'P':'1.攻击向量AV:物理(P)攻击要求攻击者对易受攻击的组件进行物理触摸或操作.. 身体互动可能是短暂的 (例如，邪恶的女佣攻击1  )或坚持不懈。 这种攻击的一个例子是冷启动攻击，攻击者在物理访问目标系统后获得对磁盘加密密钥的访问。 其他例子包括通过火线/USB直接内存访问(DMA)进行外围攻击。',
        } #攻击向量 AV

        aca ={'L':'2.攻击复杂性AC:低(L)不存在专门的准入条件或减轻处罚的情况。 攻击者可以期望在攻击易受攻击的组件时获得可重复的成功。',
        'H':'2.攻击复杂性AC:高(H)成功的攻击取决于攻击者无法控制的条件。 也就是说，成功的攻击不能随意完成，而是要求攻击者在预期成功的攻击之前，在准备或执行针对易受攻击组件方面投入一些可测量的努力。2  例如，成功的攻击可能取决于攻击者克服以下任何条件：•  攻击者必须收集关于脆弱目标/组件存在的环境的知识。 例如，要求收集关于目标配置设置、序列号或共享秘密的详细信息。•  攻击者必须准备目标环境以提高开发可靠性。 例如，重复剥削以赢得比赛条件，或克服先进的剥削缓解技术。•  攻击者必须在目标和受害者请求的资源之间注入逻辑网络路径，以便读取和/或修改网络通信（例如，处于中间攻击的人）。',
        }#攻击复杂性 AC

        pra ={'N':'3.所需特权PR:无(N)攻击者在攻击之前是未经授权的，因此不需要访问易受攻击系统的设置或文件来进行攻击。',
        'L':'3.所需特权PR:低(L)攻击者需要提供基本用户功能的特权，这些权限通常只会影响用户拥有的设置和文件。 或者，具有低权限的攻击者只能访问非敏感资源。',
        'H':'3.所需特权PR:高(H)攻击者需要对易受攻击的组件提供重要（例如管理）控制的特权，允许访问整个组件的设置和文件。',
        }#所需特权 PR

        uia ={'N':'4.用户交互UI:无(N)脆弱的系统可以在没有任何用户交互的情况下被攻击。',
        'R':'4.用户交互UI:要求(R)成功地利用这个漏洞需要用户在利用漏洞之前采取一些行动。 例如，获取管理员账号密码。',
        }#用户交互 UI

        sa ={'U':'5.范围S:未更改(U)被利用的漏洞只能影响同一安全机构管理的资源。 在这种情况下，易受伤害组件和受影响组件要么是相同的，要么都由相同的安全权限管理。',
        'C':'5.范围S:改变了(C)被利用的脆弱性会影响超出脆弱部分安全当局管理的安全范围的资源。 在这种情况下，脆弱部分和受影响部分是不同的，由不同的安全当局管理。',
        }#范围 S

        ca ={'H':'6.保密C:高(H)存在完全的保密性损失，导致受影响组件内的所有资源被泄露给攻击者.. 或者，只获取一些受限制的信息，但披露的信息会产生直接、严重的影响。 例如，攻击者窃取管理员的密码或Web服务器的私有加密密钥。',
        'L':'6.保密C:（低）存在一定的保密性损失.. 获取某些受限信息，但攻击者对获取的信息没有控制权，或损失的数量或种类有限.. 信息披露不会对受影响的组件造成直接、严重的损失。',
        'N':'6.保密C:(无)在受影响的组件内不会丢失机密性。',
        }#保密 C

        ia ={'H':'7.完整性I:高(H)存在完全丧失完整性，或完全丧失保护.. 例如，攻击者能够修改受影响组件保护的任何/所有文件。 或者，只能修改某些文件，但恶意修改会对受影响的组件造成直接、严重的后果。',
        'L':'7.完整性I:低(L)修改数据是可能的，但攻击者不能控制修改的后果，或者修改的数量是有限的。 数据修改对受影响的组件没有直接、严重的影响。',
        'N':'7.完整性I:无(N)受影响组件内没有完整性损失。',
        }#完整性 I

        aa ={'H':'8.可用性A:高(H)存在完全的可用性损失，导致攻击者能够完全拒绝访问受影响组件中的资源；这种损失要么是持续的（而攻击者继续交付攻击)，要么是持续的(即使在攻击完成后，条件仍然存在）。 或者，攻击者有能力拒绝某些可用性，但可用性的丧失给受影响的组件带来了直接的、严重的后果（例如，攻击者不能破坏现有的连接，但可以防止新的连接；攻击者可以反复利用一个漏洞，在每次成功攻击的情况下，该漏洞只泄漏少量内存，但经过反复攻击后，服务将完全不可用）。',
        'L':'8.可用性A:低(L)性能降低或资源可用性出现中断.. 即使重复开发漏洞是可能的，攻击者也没有能力完全拒绝为合法用户提供服务。 受影响部分的资源不是全部可用，就是部分时间完全可用，但总体上对受影响部分没有直接、严重的后果。',
        'N':'8.可用性A:无(N)不影响受影响组件内的可用性。',
        }#可用性 A
        hx =cvss.clean_vector()
        pf =cvss.scores()
        wxdj=cvss.severities()
        rt= '回显数据:'+ hx +'\n'+'漏洞评分:'+ str(pf[0]) +'\n'+'危险等级:'+ str(wxdj[0])
        self.textEdit.setText(ava.get(av)+'\n'+'\n'+aca.get(ac)+'\n'+'\n'+pra.get(pr)+'\n'+'\n'+uia.get(ui)+'\n'+'\n'+sa.get(s)+'\n'+'\n'+ca.get(c)+'\n'+'\n'+ia.get(i)+'\n'+'\n'+aa.get(a)+'\n'+'\n'+rt)


if __name__ == "__main__":
    app = QtWidgets.QApplication([])  # 创建一个QApplication，也就是你要开发的软件app
    MainWindow = QtWidgets.QMainWindow()    # 创建一个QMainWindow，用来装载你需要的各种组件、控件
    ui = Ui_MainWindow()                          # ui是你创建的ui类的实例化对象
    ui.setupUi(MainWindow)                  # 执行类中的setupUi方法，方法的参数是第二步中创建的QMainWindow
    MainWindow.show()                       # 执行QMainWindow的show()方法，显示这个QMainWindow
    sys.exit(app.exec_())                   # 使用exit()或者点击关闭按钮退出QApplication